using System;

class Searching
{
    // Linear Search to find the first missing positive integer
    public static int FindFirstMissingPositive(int[] arr)
    {
        int n = arr.Length;

        // Step 1: Iterate through the array and mark positions as visited
        for (int i = 0; i < n; i++)
        {
            // Ignore non-positive numbers and numbers larger than the array size
            while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i])
            {
                // Swap arr[i] and arr[arr[i] - 1] to put each number in its correct position
                int temp = arr[i];
                arr[i] = arr[arr[i] - 1];
                arr[temp - 1] = temp;
            }
        }

        // Step 2: Find the first index where the number is not correct
        for (int i = 0; i < n; i++)
        {
            if (arr[i] != i + 1)
            {
                return i + 1; // First missing positive
            }
        }

        // If no missing positive, return n + 1
        return n + 1;
    }

    // Simple Bubble Sort implementation to sort the array
    public static void BubbleSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            for (int j = 0; j < n - 1 - i; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    // Swap arr[j] and arr[j + 1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Binary Search to find the index of a target number in a sorted array
    public static int BinarySearch(int[] arr, int target)
    {
        int left = 0;
        int right = arr.Length - 1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;

            // Check if the target is at mid
            if (arr[mid] == target)
            {
                return mid; // Target found
            }

            // If target is smaller, search the left half
            if (arr[mid] > target)
            {
                right = mid - 1;
            }
            // If target is larger, search the right half
            else
            {
                left = mid + 1;
            }
        }

        // Target not found
        return -1;
    }
}

class Program
{
    // Main function to demonstrate the solution
    static void Main(string[] args)
    {
        // Example array of integers
        int[] arr = { 3, 4, -1, 1 };

        // Find the first missing positive integer using Linear Search
        int firstMissingPositive = Searching.FindFirstMissingPositive(arr);
        Console.WriteLine("The first missing positive integer is: " + firstMissingPositive);

        // Sorting the array for Binary Search (bubble sort implementation)
        Searching.BubbleSort(arr);

        // Define the target number for Binary Search
        int target = 4;
        // Find the index of the target number using Binary Search
        int targetIndex = Searching.BinarySearch(arr, target);

        if (targetIndex != -1)
        {
            Console.WriteLine("Target {0} found at index: {1}", target, targetIndex);
        }
        else
        {
            Console.WriteLine("Target {0} not found.", target);
        }
    }
}
